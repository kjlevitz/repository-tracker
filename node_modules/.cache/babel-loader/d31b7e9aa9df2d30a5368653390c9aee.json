{"ast":null,"code":"var request = require(\"request\"); //octokit } = require(\"@octokit/core\");\n\n\nclass Repository {\n  constructor(url, release_url, version, version_date, recent_update) {\n    this.url = url;\n    this.release_url = release_url;\n    this.version = version;\n    this.version_date = version_date;\n    this.recent_update = recent_update;\n  }\n\n}\n/* Given a repo name add it to our locally stored list\n * string: repo_name\n * example:\n * addWatchedRepo(\"lumanu/gh-release-monitor\")\n */\n\n\nfunction addWatchedRepo(repo_name) {\n  const uri = \"https://api.github.com/repos/\" + repo_name + \"/releases\";\n  request({\n    method: 'GET',\n    uri: uri,\n    headers: {\n      'user-agent': 'node.js'\n    }\n  }, function (err, res, body) {\n    if (err) {\n      console.error('error:', err);\n    }\n\n    ;\n    let temp_repo_list = [];\n    let rel_url = JSON.parse(res.body)[0].html_url;\n    let ver = JSON.parse(res.body)[0].tag_name;\n    let ver_date = JSON.parse(res.body)[0].published_at;\n    let temp_repo = new Repository(repo_name, rel_url, ver, ver_date, false);\n    temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n    temp_repo_list.push(temp_repo);\n    localStorage.setItem('repo_list', JSON.stringify(temp_repo_list));\n  });\n}\n\nfunction removeWatchedRepo(repo_name) {\n  let temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n\n  if (temp_repo_list == null) {\n    return;\n  } else {\n    for (let i = 0; i < temp_repo_list.length; i++) {\n      //console.log(i + \" \" + JSON.stringify(temp_repo_list[i].url));\n      if (repo_name == JSON.stringify(temp_repo_list[i].url)) {\n        print(\"MATCH\");\n      }\n    }\n  }\n} //addWatchedRepo(\"veg/datamonkey-js\");\n\n\nremoveWatchedRepo(\"veg/datamonkey-js\"); // setter localStorage.setItem(key, data)\n// getter localStorage.getItem(key)\n// remove localStorage.removeItem(key)\n\nvar return_data = JSON.parse(localStorage.getItem('repo_list'));\n\nif (return_data == null) {\n  return_data = [new Repository(\"-\", \"-\", \"-\", \"-\", false)];\n}\n\nexport default return_data;","map":{"version":3,"sources":["/home/kevin/3repo-tracker/repo-tracker/src/jsonData.js"],"names":["request","require","Repository","constructor","url","release_url","version","version_date","recent_update","addWatchedRepo","repo_name","uri","method","headers","err","res","body","console","error","temp_repo_list","rel_url","JSON","parse","html_url","ver","tag_name","ver_date","published_at","temp_repo","localStorage","getItem","push","setItem","stringify","removeWatchedRepo","i","length","print","return_data"],"mappings":"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","sourcesContent":["var request = require(\"request\");\n//octokit } = require(\"@octokit/core\");\n\nclass Repository {\n  constructor(url, release_url, version, version_date, recent_update){\n    this.url = url;\n    this.release_url = release_url;\n    this.version = version;\n    this.version_date = version_date;\n    this.recent_update = recent_update;\n  }\n}\n\n/* Given a repo name add it to our locally stored list\n * string: repo_name\n * example:\n * addWatchedRepo(\"lumanu/gh-release-monitor\")\n */\nfunction addWatchedRepo(repo_name){\n  const uri = \"https://api.github.com/repos/\" + repo_name + \"/releases\";\n  request(\n    {\n        method: 'GET',\n        uri: uri,\n        headers: {'user-agent': 'node.js'}\n    }, function (err, res, body) {\n        if(err){console.error('error:', err)};\n        let temp_repo_list = []\n        let rel_url        = JSON.parse(res.body)[0].html_url;\n        let ver            = JSON.parse(res.body)[0].tag_name;\n        let ver_date       = JSON.parse(res.body)[0].published_at;\n        let temp_repo      = new Repository(repo_name, rel_url, ver, ver_date, false);\n        temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n        temp_repo_list.push(temp_repo);\n        localStorage.setItem('repo_list', JSON.stringify(temp_repo_list));\n  });\n}\n  \nfunction removeWatchedRepo(repo_name){\n  let temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n  if(temp_repo_list == null){\n    return;\n  } else{\n      for(let i = 0; i < temp_repo_list.length; i++){\n        //console.log(i + \" \" + JSON.stringify(temp_repo_list[i].url));\n        if(repo_name == JSON.stringify(temp_repo_list[i].url)){\n          print(\"MATCH\")\n        }\n      }\n  }\n}\n\n\n//addWatchedRepo(\"veg/datamonkey-js\");\nremoveWatchedRepo(\"veg/datamonkey-js\");\n// setter localStorage.setItem(key, data)\n// getter localStorage.getItem(key)\n// remove localStorage.removeItem(key)\n\nvar return_data = JSON.parse(localStorage.getItem('repo_list'));\nif(return_data == null){\n  return_data = [new Repository(\"-\", \"-\", \"-\", \"-\", false)]\n}\nexport default return_data;\n\n\n"]},"metadata":{},"sourceType":"module"}