{"ast":null,"code":"var request = require(\"request\");\n/* Used to hold Repository information\n */\n\n\nclass Repository {\n  constructor(url, release_url, version, version_date, recent_update) {\n    this.url = url;\n    this.release_url = release_url;\n    this.version = version;\n    this.version_date = version_date;\n    this.recent_update = recent_update;\n    this.next_update = \"latest\";\n  }\n\n}\n/* Given a repo name add it to our locally stored list\n * string: repo_name\n * example:\n * addWatchedRepo(\"lumanu/gh-release-monitor\")\n */\n\n\nexports.addWatchedRepo = function addWatchedRepo(repo_name) {\n  const uri = \"https://api.github.com/repos/\" + repo_name + \"/releases\";\n  request({\n    method: 'GET',\n    uri: uri,\n    headers: {\n      'user-agent': 'node.js'\n    }\n  }, function (err, res) {\n    if (err) {\n      console.error('error:', err);\n    }\n\n    try {\n      let temp_repo_list = [];\n      let rel_url = JSON.parse(res.body)[0].html_url;\n      let ver = JSON.parse(res.body)[0].tag_name;\n      let ver_date = JSON.parse(res.body)[0].published_at;\n      let temp_repo = new Repository(repo_name, rel_url, ver, ver_date, false);\n\n      if (localStorage.getItem('repo_list')) {\n        temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n        temp_repo_list.push(temp_repo);\n        localStorage.setItem('repo_list', JSON.stringify(temp_repo_list));\n        window.location.reload(true);\n      } else {\n        localStorage.setItem('repo_list', [temp_repo]);\n        window.location.reload(true);\n      }\n    } catch (err) {\n      alert(\"Error, Repository not found\");\n      console.log(\"addWatchedRepo error = \", err);\n    }\n  });\n};\n/* Given a repo name remove it from our locally stored list\n * string: repo_name\n * example:\n * removeWatchedRepo(\"lumanu/gh-release-monitor\")\n */\n\n\nexports.removeWatchedRepo = function removeWatchedRepo(repo_name) {\n  let temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n  let cleaned_repo_list = [];\n\n  if (temp_repo_list == null) {\n    return;\n  } else {\n    for (let i = 0; i < temp_repo_list.length; i++) {\n      if (repo_name == temp_repo_list[i].url) {\n        console.log(repo_name + \" = \" + JSON.stringify(temp_repo_list[i].url));\n      } else {\n        cleaned_repo_list.push(temp_repo_list[i]);\n      }\n    }\n\n    localStorage.setItem('repo_list', JSON.stringify(cleaned_repo_list));\n    window.location.reload(true);\n  }\n};\n/* Given a repo name confirm recent update notification\n * string: repo_name\n * example:\n * confirmUpdate(\"lumanu/gh-release-monitor\")\n */\n\n\nexports.confirmUpdate = function confirmUpdate(repo_name) {\n  let temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n  let updated_repo_list = [];\n\n  if (temp_repo_list == null) {\n    return;\n  } else {\n    for (let i = 0; i < temp_repo_list.length; i++) {\n      console.log(i + \" \" + JSON.stringify(temp_repo_list[i].url));\n\n      if (repo_name == temp_repo_list[i].url) {\n        temp_repo_list[i].recent_update = false;\n        temp_repo_list[i].version = temp_repo_list[i].next_update;\n        temp_repo_list[i].next_update = \"latest\";\n        updated_repo_list.push(temp_repo_list[i]);\n      } else {\n        updated_repo_list.push(temp_repo_list[i]);\n      }\n    }\n\n    localStorage.setItem('repo_list', JSON.stringify(updated_repo_list));\n    window.location.reload(true);\n  }\n};\n/* checkForUpdates\n * scope: All stored repositories\n * notes: This will run against all scored repos, it will require a refresh when finished.\n * example:\n * checkForUpdates()\n */\n\n\nexports.checkForUpdates = function checkForUpdates() {\n  let temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n  let updated_repo_list = [];\n\n  if (temp_repo_list == null) {\n    return;\n  } else {\n    for (let i = 0; i < temp_repo_list.length; i++) {\n      const uri = \"https://api.github.com/repos/\" + temp_repo_list[i].url + \"/releases\";\n      request({\n        method: 'GET',\n        uri: uri,\n        headers: {\n          'user-agent': 'node.js'\n        }\n      }, function (err, res) {\n        if (err) {\n          console.log('error:', err);\n        }\n\n        try {\n          if (JSON.parse(res.body)[0].tag_name != temp_repo_list[i].version && !temp_repo_list[i].version.includes(\"*\")) {\n            console.log(\"Update reported\");\n            temp_repo_list[i].recent_update = true;\n            temp_repo_list[i].version = temp_repo_list[i].version + \" *(\" + JSON.parse(res.body)[0].tag_name + \")\";\n            temp_repo_list[i].next_update = JSON.parse(res.body)[0].tag_name;\n            updated_repo_list.push(temp_repo_list[i]);\n            localStorage.setItem('repo_list', JSON.stringify(updated_repo_list));\n          } else {\n            console.log(\"No update reported\");\n            updated_repo_list.push(temp_repo_list[i]);\n            localStorage.setItem('repo_list', JSON.stringify(updated_repo_list));\n          }\n        } catch (err) {\n          console.log(\"updatedRecently error = \", err);\n          return;\n        }\n      });\n    } //window.location.reload(true);\n\n  }\n};","map":{"version":3,"sources":["/home/kevin/3repo-tracker/repo-tracker/src/app/Funcs.js"],"names":["request","require","Repository","constructor","url","release_url","version","version_date","recent_update","next_update","exports","addWatchedRepo","repo_name","uri","method","headers","err","res","console","error","temp_repo_list","rel_url","JSON","parse","body","html_url","ver","tag_name","ver_date","published_at","temp_repo","localStorage","getItem","push","setItem","stringify","window","location","reload","alert","log","removeWatchedRepo","cleaned_repo_list","i","length","confirmUpdate","updated_repo_list","checkForUpdates","includes"],"mappings":"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","sourcesContent":["var request = require(\"request\");\n\n/* Used to hold Repository information\n */\nclass Repository {\n  constructor(url, release_url, version, version_date, recent_update){\n    this.url = url;\n    this.release_url = release_url;\n    this.version = version;\n    this.version_date = version_date;\n    this.recent_update = recent_update;\n    this.next_update = \"latest\"\n  }\n}\n\n/* Given a repo name add it to our locally stored list\n * string: repo_name\n * example:\n * addWatchedRepo(\"lumanu/gh-release-monitor\")\n */\nexports.addWatchedRepo = function addWatchedRepo(repo_name){\n  const uri = \"https://api.github.com/repos/\" + repo_name + \"/releases\";\n  request(\n    {\n        method: 'GET',\n        uri: uri,\n        headers: {'user-agent': 'node.js'}\n    }, function (err, res) {\n        if(err){console.error('error:', err)}\n        try{\n          let temp_repo_list = []\n          let rel_url        = JSON.parse(res.body)[0].html_url;\n          let ver            = JSON.parse(res.body)[0].tag_name;\n          let ver_date       = JSON.parse(res.body)[0].published_at;\n          let temp_repo      = new Repository(repo_name, rel_url, ver, ver_date, false);\n          if(localStorage.getItem('repo_list')){\n            temp_repo_list   = JSON.parse(localStorage.getItem('repo_list'));\n            temp_repo_list.push(temp_repo);\n            localStorage.setItem('repo_list', JSON.stringify(temp_repo_list));\n            window.location.reload(true);\n          } else{\n            localStorage.setItem('repo_list', [temp_repo]);\n            window.location.reload(true);\n          }\n        } catch(err){\n            alert(\"Error, Repository not found\");\n            console.log(\"addWatchedRepo error = \", err);\n        }\n        \n  });\n}\n\n/* Given a repo name remove it from our locally stored list\n * string: repo_name\n * example:\n * removeWatchedRepo(\"lumanu/gh-release-monitor\")\n */\nexports.removeWatchedRepo = function removeWatchedRepo(repo_name){\n  let temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n  let cleaned_repo_list = []\n  if(temp_repo_list == null){\n    return;\n  } else{\n      for(let i = 0; i < temp_repo_list.length; i++){\n        if(repo_name == temp_repo_list[i].url){\n          console.log(repo_name + \" = \" + JSON.stringify(temp_repo_list[i].url));\n        } else{\n            cleaned_repo_list.push(temp_repo_list[i])\n        }\n      }\n      localStorage.setItem('repo_list', JSON.stringify(cleaned_repo_list));\n      window.location.reload(true);\n  }\n}\n\n/* Given a repo name confirm recent update notification\n * string: repo_name\n * example:\n * confirmUpdate(\"lumanu/gh-release-monitor\")\n */\nexports.confirmUpdate = function confirmUpdate(repo_name){\n  let temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n  let updated_repo_list = []\n  if(temp_repo_list == null){\n    return;\n  } else{\n      for(let i = 0; i < temp_repo_list.length; i++){\n        console.log(i + \" \" + JSON.stringify(temp_repo_list[i].url));\n        if(repo_name == temp_repo_list[i].url){\n          temp_repo_list[i].recent_update = false;\n          temp_repo_list[i].version = temp_repo_list[i].next_update;\n          temp_repo_list[i].next_update = \"latest\";\n          updated_repo_list.push(temp_repo_list[i]);\n        }else{\n          updated_repo_list.push(temp_repo_list[i]);\n        }\n        \n      }\n      localStorage.setItem('repo_list', JSON.stringify(updated_repo_list));\n      window.location.reload(true);\n  }\n}\n\n/* checkForUpdates\n * scope: All stored repositories\n * notes: This will run against all scored repos, it will require a refresh when finished.\n * example:\n * checkForUpdates()\n */\nexports.checkForUpdates = function checkForUpdates(){\n  let temp_repo_list = JSON.parse(localStorage.getItem('repo_list'));\n  let updated_repo_list = []\n  if(temp_repo_list == null){\n    return;\n  } else{\n      for (let i = 0; i < temp_repo_list.length; i++){\n        const uri = \"https://api.github.com/repos/\" + temp_repo_list[i].url + \"/releases\";\n        request(\n          {\n              method: 'GET',\n              uri: uri,\n              headers: {'user-agent': 'node.js'}\n          }, function (err, res) {\n              if(err){console.log('error:', err)}\n              try{\n                if((JSON.parse(res.body)[0].tag_name != temp_repo_list[i].version) && !temp_repo_list[i].version.includes(\"*\")){\n                  console.log(\"Update reported\")\n                  temp_repo_list[i].recent_update = true;\n                  temp_repo_list[i].version = temp_repo_list[i].version + \" *(\" +  JSON.parse(res.body)[0].tag_name  + \")\";\n                  temp_repo_list[i].next_update = JSON.parse(res.body)[0].tag_name;\n                  updated_repo_list.push(temp_repo_list[i])\n                  localStorage.setItem('repo_list', JSON.stringify(updated_repo_list));\n                } else{\n                  console.log(\"No update reported\")\n                  updated_repo_list.push(temp_repo_list[i])\n                  localStorage.setItem('repo_list', JSON.stringify(updated_repo_list));\n                }\n              } catch(err){\n                  console.log(\"updatedRecently error = \", err);\n                  return;\n              }\n        });\n      }\n      //window.location.reload(true);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}